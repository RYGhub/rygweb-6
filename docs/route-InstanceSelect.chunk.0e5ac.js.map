{"version":3,"sources":["webpack:///./hooks/useFormValidator.js","webpack:///./routes/InstanceSelect.js","webpack:///./components/Elements/InstanceSelectBox.js","webpack:///./hooks/useFormInstanceUrl.js"],"names":["value","validator","useState","validity","message","status","setStatus","useEffect","props","onConfirm","useFormInstanceUrl","instanceUrl","setInstanceUrl","instanceUrlStatus","useContext","RoyalnetLoginStatus","error","Error","title","type","label","onChange","getEventValue","onClick","route","disabled","Validity","OK","defaultInstanceUrl","RoyalnetInstanceUrl","instanceTesterAbort","setInstanceTesterAbort","useFormValidator","length","Boolean","test","abort","AbortController","royalnetApiRequest","undefined","signal","then","data","console","log","catch","ERROR","NONE"],"mappings":"2FAAA,gBAEe,aAASA,EAAOC,GAAW,MACbC,YAAS,CACpCC,SAAU,KACVC,QAAS,KAFHC,EADkC,KAC1BC,EAD0B,KAUzC,OAJAC,aAAU,WACTN,EAAUD,EAAOM,KACf,CAACN,IAEGK,I,kCCZR,6CAGe,mBAAUG,GACxB,OACC,aACC,EAAC,IAAD,CAAmBC,UAAWD,EAAMC,e,6DCNvC,4EAMe,aAAUD,GAAO,MAC0BE,cAAlDC,EADwB,KACXC,EADW,KACKC,EADL,KAI/B,OAAmB,OAFCC,YAAWC,KAGvB,EAAC,IAAD,CAAUC,MAAO,IAAIC,MAAM,mDASlC,EAAC,IAAD,CAAOC,MAAO,qBACb,EAAC,IAAD,CAAWC,KAAM,OAAQC,MAAO,UAAWC,SAAUC,YAAcV,GAAiBT,SAAUU,EAAmBb,MAAOW,IACxH,EAAC,IAAD,CAAYS,MAAO,SAAUG,QAR/B,WACCf,EAAMC,UAAUE,GAChBa,YAAM,MAMyCC,UAAWZ,EAAkBV,WAAauB,IAASC,IAAjG,c,0DCtBH,wCAIe,eACd,IAAMC,EAAqBd,YAAWe,KADb,EAE6B3B,YAAS,MAAxD4B,EAFkB,KAEGC,EAFH,OAGa7B,YAAS0B,GAAxCjB,EAHkB,KAGLC,EAHK,KAInBC,EAAoBmB,YAAiBrB,GAAa,SAACX,EAAOM,GAC/D,GAAoB,IAAjBN,EAAMiC,OAQT,GAAIC,QAAQ,uBAAuBC,KAAKnC,IAAxC,CAQ2B,OAAxB8B,GACFA,EAAoBM,QAErB,IAAIA,EAAQ,IAAIC,gBAChBN,EAAuBK,GAEvBE,YAAmBtC,EAAO,MAAO,gCAA4BuC,EAAWH,EAAMI,QAAQC,MAAK,SAACC,GACxF1C,IAAUW,EACZL,EAAU,CACTH,SAAUuB,IAASC,GACnBvB,QAAS,YAAYsC,EAAI,WAI1BC,QAAQC,IAAI,WAEXC,OAAM,WACL7C,IAAUW,GACZL,EAAU,CACTH,SAAUuB,IAASoB,MACnB1C,QAAS,2GAIZE,EAAU,CACTH,SAAUuB,IAASqB,KACnB3C,QAAS,UAjCTE,EAAU,CACTH,SAAUuB,IAASoB,MACnB1C,QAAS,8CAVVE,EAAU,CACTH,SAAUuB,IAASqB,KACnB3C,QAAS,QA2CZ,MAAO,CAACO,EAAaC,EAAgBC","file":"route-InstanceSelect.chunk.0e5ac.js","sourcesContent":["import { useEffect, useState } from 'preact/hooks';\n\nexport default function(value, validator) {\n\tconst [status, setStatus] = useState({\n\t\tvalidity: null,\n\t\tmessage: \"\"\n\t});\n\n\tuseEffect(() => {\n\t\tvalidator(value, setStatus);\n\t}, [value]);\n\n\treturn status;\n}\n","import InstanceSelectBox from '../components/Elements/InstanceSelectBox';\nimport { Fragment } from 'preact';\n\nexport default function (props) {\n\treturn (\n\t\t<div>\n\t\t\t<InstanceSelectBox onConfirm={props.onConfirm}/>\n\t\t</div>\n\t);\n}\n","import { Box, FormButton, FormInput, getEventValue, Panel, RoyalnetLoginStatus, Section, Validity } from 'bluelib';\nimport useFormInstanceUrl from '../../hooks/useFormInstanceUrl';\nimport { useContext } from 'preact/hooks';\nimport ErrorBox from './ErrorBox';\nimport { route } from 'preact-router';\n\nexport default function (props) {\n\tconst [instanceUrl, setInstanceUrl, instanceUrlStatus] = useFormInstanceUrl();\n\tconst loginStatus = useContext(RoyalnetLoginStatus);\n\n\tif(loginStatus !== null) {\n\t\treturn <ErrorBox error={new Error(\"Non puoi cambiare istanza mentre sei loggato.\")}/>\n\t}\n\n\tfunction change() {\n\t\tprops.onConfirm(instanceUrl);\n\t\troute(\"/\");\n\t}\n\n\treturn (\n\t\t<Panel title={\"Selezione istanza\"}>\n\t\t\t<FormInput type={\"text\"} label={\"Istanza\"} onChange={getEventValue(setInstanceUrl)} validity={instanceUrlStatus} value={instanceUrl}/>\n\t\t\t<FormButton label={\"Cambia\"} onClick={change} disabled={!instanceUrlStatus.validity === Validity.OK}>Cambia</FormButton>\n\t\t</Panel>\n\t);\n}\n","import { useContext, useState } from 'preact/hooks';\nimport useFormValidator from './useFormValidator';\nimport { royalnetApiRequest, RoyalnetInstanceUrl, Validity } from 'bluelib';\n\nexport default function() {\n\tconst defaultInstanceUrl = useContext(RoyalnetInstanceUrl);\n\tconst [instanceTesterAbort, setInstanceTesterAbort] = useState(null);\n\tconst [instanceUrl, setInstanceUrl] = useState(defaultInstanceUrl);\n\tconst instanceUrlStatus = useFormValidator(instanceUrl, (value, setStatus) => {\n\t\tif(value.length === 0) {\n\t\t\tsetStatus({\n\t\t\t\tvalidity: Validity.NONE,\n\t\t\t\tmessage: \"\"\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\tif(!Boolean(/^https?:\\/\\/.*?[^/]$/.test(value))) {\n\t\t\tsetStatus({\n\t\t\t\tvalidity: Validity.ERROR,\n\t\t\t\tmessage: \"L'URL che hai inserito non Ã¨ valido.\"\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\tif(instanceTesterAbort !== null) {\n\t\t\tinstanceTesterAbort.abort();\n\t\t}\n\t\tlet abort = new AbortController();\n\t\tsetInstanceTesterAbort(abort);\n\n\t\troyalnetApiRequest(value, \"GET\", \"/api/royalnet/version/v1\", undefined, abort.signal).then((data) => {\n\t\t\tif(value === instanceUrl) {\n\t\t\t\tsetStatus({\n\t\t\t\t\tvalidity: Validity.OK,\n\t\t\t\t\tmessage: `Royalnet ${data[\"semantic\"]}`\n\t\t\t\t});\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconsole.log(\"wtf?\")\n\t\t\t}\n\t\t}).catch((err) => {\n\t\t\tif(value === instanceUrl) {\n\t\t\t\tsetStatus({\n\t\t\t\t\tvalidity: Validity.ERROR,\n\t\t\t\t\tmessage: \"Non sembra esserci nessuna istanza a quell'URL... Sei sicuro che quella sia un'istanza di Royalnet?\"\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t\tsetStatus({\n\t\t\tvalidity: Validity.NONE,\n\t\t\tmessage: \"\"\n\t\t});\n\t});\n\n\treturn [instanceUrl, setInstanceUrl, instanceUrlStatus];\n}\n"],"sourceRoot":""}