{"version":3,"sources":["webpack:///./hooks/useFormValidator.js","webpack:///./components/Elements/LoginBox.js","webpack:///./components/Elements/Links/IconLink.js","webpack:///./components/Elements/Avatar.less","webpack:///./components/Elements/Avatar.js","webpack:///./hooks/useFormUsername.js","webpack:///./components/Elements/Links/UserLink.js","webpack:///./hooks/useFormPassword.js","webpack:///./routes/Login.js","webpack:///./components/Elements/Links/AnyLink.js"],"names":["value","validator","useState","validity","message","status","setStatus","useEffect","props","useFormUsername","username","setUsername","usernameStatus","useFormPassword","password","setPassword","passwordStatus","instanceUrl","useContext","RoyalnetInstanceUrl","loginStatus","RoyalnetLoginStatus","loginWorking","setLoginWorking","loginError","setLoginError","error","Error","user","loginValidity","icon","faSpinner","pulse","Validity","ERROR","faExclamationCircle","title","href","type","name","label","onChange","getEventValue","onClick","console","log","royalnetApiRequest","then","data","onLogin","route","catch","err","finally","disabled","icons","Object","freeze","faGithub","faWikipediaW","faRedditAlien","faTwitch","faTwitter","faYoutube","faTelegram","faSteam","faDiscord","url","URL","protocol","faLockOpen","undefined","host","faExternalLinkAlt","children","module","exports","alt","src","avatar_url","steam","length","avatar","class","concatClass","style","filteredUsername","toLowerCase","replace","useRoyalnetData","aliasData","OK","faCheck","uid","alias","unloadedContents","apiMethod","apiBody","text","Array","useFormValidator","faQuestion","userIdRegex","userAliasRegex","window","location","e","userIdMatch","pathname","match","userAliasMatch"],"mappings":"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","file":"route-Login.chunk.6e2f5.js","sourcesContent":["import { useEffect, useState } from 'preact/hooks';\n\nexport default function(value, validator) {\n\tconst [status, setStatus] = useState({\n\t\tvalidity: null,\n\t\tmessage: \"\"\n\t});\n\n\tuseEffect(() => {\n\t\tvalidator(value, setStatus);\n\t}, [value]);\n\n\treturn status;\n}\n","import {\n\tBox, FormButton, FormInput,\n\tgetEventValue, Panel,\n\troyalnetApiRequest,\n\tRoyalnetInstanceUrl,\n\tRoyalnetLoginStatus, Validity\n} from 'bluelib';\nimport { useContext, useState } from 'preact/hooks';\nimport ErrorBox from './ErrorBox';\nimport useFormUsername from '../../hooks/useFormUsername';\nimport useFormPassword from '../../hooks/useFormPassword';\nimport { route } from 'preact-router';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport { faExclamationCircle, faSpinner } from '@fortawesome/free-solid-svg-icons';\nimport AnyLink from './Links/AnyLink';\n\nexport default function (props) {\n\tconst [username, setUsername, usernameStatus] = useFormUsername();\n\tconst [password, setPassword, passwordStatus] = useFormPassword();\n\tconst instanceUrl = useContext(RoyalnetInstanceUrl);\n\tconst loginStatus = useContext(RoyalnetLoginStatus);\n\n\tconst [loginWorking, setLoginWorking] = useState(false);\n\tconst [loginError, setLoginError] = useState(null);\n\n\tif(loginStatus !== null) {\n\t\treturn <ErrorBox error={new Error(`Sei giÃ  loggato come ${loginStatus.user.username}.`)}/>\n\t}\n\n\tfunction login() {\n\t\tconsole.log(\"Logging in...\");\n\t\tsetLoginWorking(true);\n\t\troyalnetApiRequest(instanceUrl, \"POST\", \"/api/auth/login/royalnet/v1\", {\n\t\t\tusername: username,\n\t\t\tpassword: password\n\t\t}).then((data) => {\n\t\t\tprops.onLogin(data);\n\t\t\troute(\"/\");\n\t\t}).catch((err) => {\n\t\t\tsetLoginError(err);\n\t\t}).finally(() => {\n\t\t\tsetLoginWorking(false);\n\t\t})\n\t}\n\n\tlet loginValidity = {};\n\tif(loginWorking) {\n\t\tloginValidity = {\n\t\t\ticon: <FontAwesomeIcon icon={faSpinner} pulse={true}/>\n\t\t}\n\t}\n\telse if(loginError) {\n\t\tloginValidity = {\n\t\t\tvalidity: Validity.ERROR,\n\t\t\t\ticon: <FontAwesomeIcon icon={faExclamationCircle}/>,\n\t\t\tmessage: loginError.message\n\t\t}\n\t}\n\n\treturn (\n\t\t<Panel title={\"Login\"}>\n\t\t\t<p>\n\t\t\t\tStai facendo il login su <code>{instanceUrl}</code>.<br/>\n\t\t\t\t<small>Vuoi usare <AnyLink href={\"/instanceselect\"}>un'istanza diversa</AnyLink>?</small>\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\t<FormInput type={\"text\"} name={\"username\"} label={\"Username\"} onChange={getEventValue(setUsername)} validity={usernameStatus} value={username}/>\n\t\t\t\t<FormInput type={\"password\"} label={\"Password\"} onChange={getEventValue(setPassword)} validity={passwordStatus} value={password}/>\n\t\t\t\t<FormButton label={\"Login\"} onClick={login} disabled={loginWorking} validity={loginValidity}>Login</FormButton>\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\t<small>Facendo il login, verranno salvate nel tuo browser <AnyLink href={`${instanceUrl}/docs#operations-auth-ApiAuthLoginRoyalnetStar_post`}>alcune informazioni</AnyLink> relative al tuo account, permettendoti di non rifare il login per un po' di tempo.</small>\n\t\t\t</p>\n\t\t</Panel>\n\t);\n}\n","import Link from './Link';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n\tfaDiscord,\n\tfaGithub,\n\tfaRedditAlien, faSteam, faTelegram,\n\tfaTwitch,\n\tfaTwitter,\n\tfaWikipediaW, faYoutube\n} from '@fortawesome/free-brands-svg-icons';\nimport { faExternalLinkAlt, faLockOpen } from '@fortawesome/free-solid-svg-icons';\n\nconst icons = Object.freeze({\n\t\"github.com\": faGithub,\n\n\t\"en.wikipedia.org\": faWikipediaW,\n\t\"it.wikipedia.org\": faWikipediaW,\n\n\t\"old.reddit.com\": faRedditAlien,\n\t\"new.reddit.com\": faRedditAlien,\n\t\"www.reddit.com\": faRedditAlien,\n\t\"reddit.com\": faRedditAlien,\n\n\t\"twitch.tv\": faTwitch,\n\n\t\"twitter.com\": faTwitter,\n\n\t\"www.youtube.com\": faYoutube,\n\t\"youtube.com\": faYoutube,\n\t\"youtu.be\": faYoutube,\n\n\t\"t.me\": faTelegram,\n\n\t\"steampowered.com\": faSteam,\n\t\"steamcommunity.com\": faSteam,\n\n\t\"discord.gg\": faDiscord,\n\t\"discordapp.com\": faDiscord,\n\t\"discord.com\": faDiscord,\n});\n\nexport default function (props) {\n\tconst url = new URL(props.href);\n\n\tlet icon = null;\n\n\tif (url.protocol === \"http:\") {\n\t\ticon = faLockOpen;\n\t}\n\n\telse if(url.protocol === \"https:\") {\n\t\ticon = icons[url.host];\n\t\tif(icon === undefined) {\n\t\t\ticon = faExternalLinkAlt;\n\t\t}\n\t}\n\n\treturn (\n\t\t<Link href={props.href}>\n\t\t\t<FontAwesomeIcon icon={icon}/> {props.children}\n\t\t</Link>\n\t);\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatar\":\"avatar__jX0g7\"};","import { concatClass } from 'bluelib';\nimport style from './Avatar.less';\n\nexport default function (props) {\n\tlet avatar_url;\n\tif(props.src) {\n\t\tavatar_url = props.src;\n\t}\n\telse if(props.data.avatar_url) {\n\t\tavatar_url = props.data.avatar_url;\n\t}\n\telse if(props.data.steam.length > 0 && props.data.steam[0].avatar) {\n\t\tavatar_url = props.data.steam[0].avatar;\n\t}\n\telse {\n\t\tavatar_url = \"https://combo.steffo.eu/open/ryg/GenericUser.png\";\n\t}\n\n\treturn (\n\t\t<img alt={\"\"} src={avatar_url} class={concatClass(style.avatar, props.class)}/>\n\t);\n}\n","import { useContext, useState } from 'preact/hooks';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport { RoyalnetInstanceUrl, useRoyalnetData, Validity } from 'bluelib';\nimport { faCheck, faExclamationCircle, faExclamationTriangle, faSpinner } from '@fortawesome/free-solid-svg-icons';\n\nexport default function() {\n\tconst [username, setUsername] = useState(\"\");\n\tconst [usernameCheckerAbort, setUsernameCheckerAbort] = useState(null);\n\tconst instanceUrl = useContext(RoyalnetInstanceUrl);\n\n\tlet lowerUsername = username.toLowerCase();\n\tlet filteredUsername = lowerUsername.replace(/[^a-z]/g, \"\");\n\n\tconst [aliasData, aliasError] = useRoyalnetData(\"GET\", \"/api/user/find/v1\", {\"alias\": filteredUsername});\n\n\tlet usernameStatus = {};\n\n\tif(filteredUsername !== \"\") {\n\t\tif(aliasError !== undefined) {\n\t\t\tusernameStatus = {\n\t\t\t\tvalidity: Validity.ERROR,\n\t\t\t\ticon: <FontAwesomeIcon icon={faExclamationCircle}/>,\n\t\t\t\tmessage: \"Non esiste nessun utente con questo username.\"\n\t\t\t}\n\t\t}\n\t\telse if(aliasData === undefined) {\n\t\t\t\tusernameStatus = {\n\t\t\t\t\ticon: <FontAwesomeIcon icon={faSpinner} pulse={true}/>,\n\t\t\t\t}\n\t\t}\n\t\telse if(aliasData.username !== filteredUsername) {\n\t\t\tusernameStatus = {\n\t\t\t\tvalidity: Validity.ERROR,\n\t\t\t\ticon: <FontAwesomeIcon icon={faExclamationCircle}/>,\n\t\t\t\tmessage: <span>Hai sbagliato username! Il tuo username Ã¨ <b>{aliasData.username}</b>.</span>,\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tusernameStatus = {\n\t\t\t\tvalidity: Validity.OK,\n\t\t\t\ticon: <FontAwesomeIcon icon={faCheck}/>\n\t\t\t}\n\t\t}\n\t}\n\n\treturn [filteredUsername, setUsername, usernameStatus];\n}\n","import { useRoyalnetData } from 'bluelib';\nimport Link from './Link';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons';\nimport Avatar from '../Avatar';\nimport ErrorAbbr from '../ErrorAbbr';\n\n\nexport default function (props) {\n\tif(!(props.uid || props.alias)) {\n\t\treturn (\n\t\t\t<ErrorAbbr error={new Error(\"Missing uid or alias.\")}>{unloadedContents}</ErrorAbbr>\n\t\t);\n\t}\n\n\n\tlet unloadedContents = props.children;\n\tif(!unloadedContents) {\n\t\tif(props.uid) {\n\t\t\tunloadedContents = props.uid;\n\t\t}\n\t\telse if(props.alias) {\n\t\t\tunloadedContents = props.alias;\n\t\t}\n\t}\n\n\tlet apiMethod, apiBody;\n\tif(props.uid) {\n\t\tapiMethod = \"/api/user/get/ryg/v1\";\n\t\tapiBody = {\"id\": props.uid};\n\t}\n\telse if(props.alias) {\n\t\tapiMethod = \"/api/user/find/ryg/v1\";\n\t\tapiBody = {\"alias\": props.alias.toLowerCase()};\n\t}\n\n\tlet [data, error, refresh] = useRoyalnetData(\"GET\", apiMethod, apiBody);\n\n\tif(error !== undefined) {\n\t\treturn (\n\t\t\t<ErrorAbbr error={error}>{unloadedContents}</ErrorAbbr>\n\t\t);\n\t}\n\n\tif(data === undefined) {\n\t\tif(props.uid) {\n\t\t\treturn (\n\t\t\t\t<Link href={`/u/${props.uid}`}>\n\t\t\t\t\t<FontAwesomeIcon icon={faSpinner} pulse={true}/> {unloadedContents}\n\t\t\t\t</Link>\n\t\t\t);\n\t\t}\n\t\telse if(props.alias) {\n\t\t\treturn (\n\t\t\t\t<Link href={`#`}>\n\t\t\t\t\t<FontAwesomeIcon icon={faSpinner} pulse={true}/> {unloadedContents}\n\t\t\t\t</Link>\n\t\t\t);\n\t\t}\n\t}\n\n\tlet text = data.username;\n\tif(props.children instanceof Array && props.children.length > 0) {\n\t\ttext = props.children;\n\t}\n\n\treturn (\n\t\t<Link href={`/u/${data.uid}`}>\n\t\t\t<Avatar data={data}/> {text}\n\t\t</Link>\n\t);\n}\n","import { useState } from 'preact/hooks';\nimport useFormValidator from './useFormValidator';\nimport { Validity } from 'bluelib';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faEllipsisH, faQuestion } from '@fortawesome/free-solid-svg-icons';\n\nexport default function() {\n\tconst [password, setPassword] = useState(\"\");\n\tconst passwordStatus = useFormValidator(password, (value, setStatus) => {\n\t\tif(value.length === 0) {\n\t\t\tsetStatus({});\n\t\t\treturn;\n\t\t}\n\n\t\tsetStatus({\n\t\t\tvalidity: Validity.OK,\n\t\t\ticon: <FontAwesomeIcon icon={faQuestion}/>\n\t\t});\n\t});\n\n\treturn [password, setPassword, passwordStatus]\n}\n","import LoginBox from '../components/Elements/LoginBox';\nimport { Fragment } from 'preact';\n\nexport default function (props) {\n\treturn (\n\t\t<div>\n\t\t\t<LoginBox onLogin={props.onLogin}/>\n\t\t</div>\n\t);\n}\n","import IconLink from './IconLink';\nimport ErrorAbbr from '../ErrorAbbr';\nimport Link from './Link';\nimport UserLink from './UserLink';\n\nconst userIdRegex = /^\\/u\\/([0-9]+)$/;\nconst userAliasRegex = /^\\/u\\/([A-Za-z]+)$/;\n\nexport default function (props) {\n\tlet url;\n\ttry {\n\t\turl = new URL(props.href, window.location.href)\n\t} catch (e) {\n\t\treturn (\n\t\t\t<ErrorAbbr error={e}>{props.children}</ErrorAbbr>\n\t\t);\n\t}\n\n\tif(window.location.host !== url.host) {\n\t\treturn <IconLink href={url}>{props.children}</IconLink>\n\t}\n\n\tlet userIdMatch = url.pathname.match(userIdRegex);\n\tconsole.log(userIdMatch);\n\tif(userIdMatch) {\n\t\treturn <UserLink uid={userIdMatch[1]}>{props.children}</UserLink>\n\t}\n\n\tlet userAliasMatch = url.pathname.match(userAliasRegex);\n\tif(userAliasMatch) {\n\t\treturn <UserLink alias={userAliasMatch[1]}>{props.children}</UserLink>\n\t}\n\n\treturn (\n\t\t<Link href={url}>{props.children}</Link>\n\t);\n}\n"],"sourceRoot":""}