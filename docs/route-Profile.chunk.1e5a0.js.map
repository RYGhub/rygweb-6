{"version":3,"sources":["webpack:///./hooks/useFormChangePassword.js","webpack:///./routes/Profile.js","webpack:///./components/Dynamic/LogoutBox.js","webpack:///./components/Dynamic/ChangePasswordBox.js"],"names":["useState","password","useFormValidator","value","setStatus","length","validity","Validity","WARNING","icon","faExclamationTriangle","message","OK","faCheck","NONE","props","loginStatus","useContext","RoyalnetLoginStatus","useRoyalnetData","uid","userData","userError","changePasswdBox","logoutBox","user","logout","undefined","error","src","alt","faSpinner","pulse","data","username","logoutWorking","setLogoutWorking","logoutValidity","title","href","label","onClick","console","debug","route","disabled","useFormChangePassword","setPassword","passwordStatus","setValidity","instanceUrl","RoyalnetInstanceUrl","type","name","onChange","getEventValue","DISABLED","royalnetApiRequest","new_password","token","then","revoked_tokens","catch","err","ERROR","faExclamationCircle"],"mappings":"4FAAA,gEAMe,eAAW,MACOA,YAAS,IAAlCC,EADkB,KAyBzB,MAAO,CAACA,EAzBiB,KAEFC,YAAiBD,GAAU,SAACE,EAAOC,GASxDA,EARmB,IAAjBD,EAAME,OAONF,EAAME,QAAU,GACR,CACTC,SAAUC,IAASC,QACnBC,KAAM,EAAC,IAAD,CAAiBA,KAAMC,MAC7BC,QAAS,2EAKD,CACTL,SAAUC,IAASK,GACnBH,KAAM,EAAC,IAAD,CAAiBA,KAAMI,OAjBnB,CACTP,SAAUC,IAASO,c,0DCXvB,mIAWe,mBAAUC,GACxB,IAAMC,EAAcC,YAAWC,KADA,EAEDC,YAAgB,MAAO,mBAAoB,CACxEC,IAAKL,EAAMK,MADLC,EAFwB,KAEdC,EAFc,KAM3BC,EAAkB,KAClBC,EAAY,KAShB,OARGR,GAECA,EAAYS,KAAKL,KAAOL,EAAMK,MAChCG,EAAkB,EAAC,IAAD,MAClBC,EAAY,EAAC,IAAD,CAAWE,OAAQX,EAAMW,eAItBC,IAAdL,EAED,EAAC,IAAD,CAAUM,MAAON,SAIHK,IAAbN,EAED,YAAI,EAAC,IAAD,CAAQQ,IAAK,mDAAoDC,IAAK,KAAK,EAAC,IAAD,CAAiBrB,KAAMsB,IAAWC,OAAO,KAkBzH,aACC,EAAC,IAAD,KACC,EAAC,IAAD,CAAQC,KAAMZ,IADf,IAC4BA,EAASa,UAEpCX,EACAC,K,2DC1DJ,wFAOe,aAAUT,GAAO,MACWf,aAAS,GAA5CmC,EADwB,KACTC,EADS,KAU3BC,EAAiB,GAOrB,OANGF,IACFE,EAAiB,CAChB5B,KAAM,EAAC,IAAD,CAAiBA,KAAMsB,IAAWC,OAAO,MAKhD,EAAC,IAAD,CAAOM,MAAO,UACb,qBACQ,EAAC,IAAD,CAASC,KAAM,+CAAf,qBADR,OAGA,WACC,EAAC,IAAD,CAAYC,MAAO,SAAUC,QApBhC,WACCC,QAAQC,MAAM,kBACdP,GAAiB,GACjBrB,EAAMW,SACNkB,YAAM,MAgB0CC,SAAUV,EAAe7B,SAAU+B,GAAjF,sC,2DC9BJ,wFAee,eAAiB,MACiBS,cAAzC7C,EADwB,KACd8C,EADc,KACDC,EADC,OAEChD,YAAS,IAAlCM,EAFwB,KAEd2C,EAFc,KAGzBC,EAAcjC,YAAWkC,KACzBnC,EAAcC,YAAWC,KAyB/B,OACC,EAAC,IAAD,CAAOoB,MAAO,mBACb,oHAGA,WACC,EAAC,IAAD,CAAWc,KAAM,WAAYC,KAAM,WAAYb,MAAO,iBAAkBc,SAAUC,YAAcR,GAAczC,SAAU0C,EAAgB7C,MAAOF,IAC/I,EAAC,IAAD,CAAYuC,MAAO,SAAUC,QA9BhC,WACCQ,EAAY,CACX3C,SAAUC,IAASiD,SACnB/C,KAAM,EAAC,IAAD,CAAiBA,KAAMsB,IAAWC,OAAO,MAEhDyB,YAAmBP,EAAa,MAAO,sBAAuB,CAC7DQ,aAAczD,EACd0D,MAAO3C,EAAY2C,QACjBC,MAAK,SAAC3B,GACRgB,EAAY,CACX3C,SAAUC,IAASK,GACnBH,KAAM,EAAC,IAAD,CAAiBA,KAAMI,MAC7BF,QAAS,0DAA0DsB,EAAK4B,eAAjE,SAA+G,IAAxB5B,EAAK4B,eAAuB,IAAM,KAAzH,YAA+J,IAAxB5B,EAAK4B,eAAuB,IAAM,KAAzK,SAENC,OAAM,SAACC,GACTd,EAAY,CACX3C,SAAUC,IAASyD,MACnBvD,KAAM,EAAC,IAAD,CAAiBA,KAAMwD,MAC7BtD,QAASoD,EAAIpD,cAYiCkC,SAAUvC,EAASuC,UAAgC,IAApB5C,EAASI,OAAcC,SAAUA,GAA9G,wB","file":"route-Profile.chunk.1e5a0.js","sourcesContent":["import { useState } from 'preact/hooks';\nimport {useFormValidator} from 'bluelib';\nimport { Validity } from 'bluelib';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCheck, faEllipsisH, faExclamationTriangle, faKey, faQuestion } from '@fortawesome/free-solid-svg-icons';\n\nexport default function() {\n\tconst [password, setPassword] = useState(\"\");\n\tconst passwordStatus = useFormValidator(password, (value, setStatus) => {\n\t\tif(value.length === 0) {\n\t\t\tsetStatus({\n\t\t\t\tvalidity: Validity.NONE,\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\tif(value.length <= 12) {\n\t\t\tsetStatus({\n\t\t\t\tvalidity: Validity.WARNING,\n\t\t\t\ticon: <FontAwesomeIcon icon={faExclamationTriangle}/>,\n\t\t\t\tmessage: \"La password è un po' corta... Cerca di farla lunga almeno 12 caratteri.\",\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\tsetStatus({\n\t\t\tvalidity: Validity.OK,\n\t\t\ticon: <FontAwesomeIcon icon={faCheck}/>\n\t\t});\n\t});\n\n\treturn [password, setPassword, passwordStatus]\n}\n","import { useContext } from 'preact/hooks';\nimport { Panel, RoyalnetLoginStatus, useRoyalnetData } from 'bluelib';\nimport LogoutBox from '../components/Dynamic/LogoutBox';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons';\nimport ErrorBox from '../components/Static/ErrorBox';\nimport Avatar from '../components/Static/Avatar';\nimport { HZero } from 'bluelib';\nimport RoyalMarkdown from '../components/Static/RoyalMarkdown';\nimport ChangePasswordBox from '../components/Dynamic/ChangePasswordBox';\n\nexport default function (props) {\n\tconst loginStatus = useContext(RoyalnetLoginStatus);\n\tconst [userData, userError] = useRoyalnetData(\"GET\", \"/api/user/ryg/v2\", {\n\t\tuid: props.uid\n\t});\n\n\tlet changePasswdBox = null;\n\tlet logoutBox = null;\n\tif(loginStatus) {\n\t\t// noinspection EqualityComparisonWithCoercionJS\n\t\tif(loginStatus.user.uid == props.uid) {\n\t\t\tchangePasswdBox = <ChangePasswordBox/>;\n\t\t\tlogoutBox = <LogoutBox logout={props.logout}/>;\n\t\t}\n\t}\n\n\tif(userError !== undefined) {\n\t\treturn (\n\t\t\t<ErrorBox error={userError}/>\n\t\t);\n\t}\n\n\tif(userData === undefined) {\n\t\treturn (\n\t\t\t<h0><Avatar src={\"https://combo.steffo.eu/open/ryg/GenericUser.png\"} alt={\"\"}/><FontAwesomeIcon icon={faSpinner} pulse={true}/></h0>\n\t\t)\n\t}\n\n\t/*\n\tlet bioBox = null;\n\tif(userData.bio) {\n\t\tbioBox = (\n\t\t\t<Panel title={\"Bio\"}>\n\t\t\t\t<RoyalMarkdown>\n\t\t\t\t\t{userData.bio.contents}\n\t\t\t\t</RoyalMarkdown>\n\t\t\t</Panel>\n\t\t)\n\t}\n    */\n\n\treturn (\n\t\t<div>\n\t\t\t<HZero>\n\t\t\t\t<Avatar data={userData}/> {userData.username}\n\t\t\t</HZero>\n\t\t\t{changePasswdBox}\n\t\t\t{logoutBox}\n\t\t</div>\n\t);\n}\n","import { FormButton, Panel } from 'bluelib';\nimport { route } from 'preact-router';\nimport { useState } from 'preact/hooks';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons';\nimport AnyLink from './Link';\n\nexport default function (props) {\n\tconst [logoutWorking, setLogoutWorking] = useState(false);\n\n\tfunction logout() {\n\t\tconsole.debug(\"Logging out...\");\n\t\tsetLogoutWorking(true);\n\t\tprops.logout();\n\t\troute(\"/\");\n\t}\n\n\tlet logoutValidity = {};\n\tif(logoutWorking) {\n\t\tlogoutValidity = {\n\t\t\ticon: <FontAwesomeIcon icon={faSpinner} pulse={true}/>\n\t\t}\n\t}\n\n\treturn (\n\t\t<Panel title={\"Logout\"}>\n\t\t\t<p>\n\t\t\t\tSenta, <AnyLink href={\"https://www.youtube.com/watch?v=KoC-M5yBKQ4\"}>dottoressa Frinzi</AnyLink>...\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\t<FormButton label={\"Logout\"} onClick={logout} disabled={logoutWorking} validity={logoutValidity}>Esci da questo posto di *****</FormButton>\n\t\t\t</p>\n\t\t</Panel>\n\t);\n}\n","import {\r\n\tFormButton,\r\n\tFormInput,\r\n\tgetEventValue,\r\n\tPanel,\r\n\troyalnetApiRequest,\r\n\tRoyalnetInstanceUrl, RoyalnetLoginStatus,\r\n\tValidity\r\n} from 'bluelib';\r\nimport useFormPassword from '../../hooks/useFormPassword';\r\nimport { useContext, useState } from 'preact/hooks';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCheck, faExclamationCircle, faSpinner } from '@fortawesome/free-solid-svg-icons';\r\nimport useFormChangePassword from '../../hooks/useFormChangePassword';\r\n\r\nexport default function (props) {\r\n\tconst [password, setPassword, passwordStatus] = useFormChangePassword();\r\n\tconst [validity, setValidity] = useState({});\r\n\tconst instanceUrl = useContext(RoyalnetInstanceUrl);\r\n\tconst loginStatus = useContext(RoyalnetLoginStatus);\r\n\r\n\tfunction change() {\r\n\t\tsetValidity({\r\n\t\t\tvalidity: Validity.DISABLED,\r\n\t\t\ticon: <FontAwesomeIcon icon={faSpinner} pulse={true}/>\r\n\t\t});\r\n\t\troyalnetApiRequest(instanceUrl, \"PUT\", \"/api/user/passwd/v1\", {\r\n\t\t\tnew_password: password,\r\n\t\t\ttoken: loginStatus.token\r\n\t\t}).then((data) => {\r\n\t\t\tsetValidity({\r\n\t\t\t\tvalidity: Validity.OK,\r\n\t\t\t\ticon: <FontAwesomeIcon icon={faCheck}/>,\r\n\t\t\t\tmessage: `Password cambiata con successo! Sono state disconnesse ${data.revoked_tokens} altr${data.revoked_tokens !== 1 ? 'e' : 'a'} session${data.revoked_tokens !== 1 ? 'i' : 'e'}.`,\r\n\t\t\t});\r\n\t\t}).catch((err) => {\r\n\t\t\tsetValidity({\r\n\t\t\t\tvalidity: Validity.ERROR,\r\n\t\t\t\ticon: <FontAwesomeIcon icon={faExclamationCircle}/>,\r\n\t\t\t\tmessage: err.message\r\n\t\t\t});\r\n\t\t})\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Panel title={\"Cambia password\"}>\r\n\t\t\t<p>\r\n\t\t\t\tCambiare password ti disconnetterà da tutte le sessioni tranne questa. Sei sicuro di voler procedere?\r\n\t\t\t</p>\r\n\t\t\t<p>\r\n\t\t\t\t<FormInput type={\"password\"} name={\"password\"} label={\"Nuova password\"} onChange={getEventValue(setPassword)} validity={passwordStatus} value={password}/>\r\n\t\t\t\t<FormButton label={\"Cambia\"} onClick={change} disabled={validity.disabled || password.length === 0} validity={validity}>Cambia password</FormButton>\r\n\t\t\t</p>\r\n\t\t</Panel>\r\n\t);\r\n}\r\n"],"sourceRoot":""}