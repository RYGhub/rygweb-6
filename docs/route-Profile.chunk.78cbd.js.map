{"version":3,"sources":["webpack:///./components/Dynamic/ChangeAvatarBox.js","webpack:///./hooks/useFormChangePassword.js","webpack:///./routes/Profile.js","webpack:///./components/Dynamic/LogoutBox.js","webpack:///./components/Dynamic/ChangeAvatarBox.less","webpack:///./hooks/useUrl.js","webpack:///./components/Dynamic/ChangePasswordBox.js"],"names":["props","defaultAvatar","currentAvatar","useUrl","avatarUrl","setAvatarUrl","avatarUrlStatus","useState","validity","setValidity","instanceUrl","useContext","RoyalnetInstanceUrl","loginStatus","RoyalnetLoginStatus","displayedAvatarUrl","Validity","OK","title","class","style","preview","src","type","name","label","onChange","getEventValue","value","onClick","DISABLED","icon","faSpinner","pulse","royalnetApiRequest","avatar_url","token","then","faCheck","message","catch","err","ERROR","faExclamationCircle","disabled","href","password","useFormValidator","setStatus","length","WARNING","faExclamationTriangle","NONE","useRoyalnetData","uid","userData","userError","changeAvatarBox","changePasswdBox","logoutBox","user","logout","undefined","error","alt","data","username","logoutWorking","setLogoutWorking","logoutValidity","console","debug","route","module","exports","defaultValue","url","Boolean","test","useFormChangePassword","setPassword","passwordStatus","new_password","revoked_tokens"],"mappings":"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","file":"route-Profile.chunk.78cbd.js","sourcesContent":["import useUrl from '../../hooks/useUrl';\r\nimport {\r\n\tFormButton,\r\n\tFormInput,\r\n\tgetEventValue,\r\n\tPanel, royalnetApiRequest,\r\n\tRoyalnetInstanceUrl,\r\n\tRoyalnetLoginStatus,\r\n\tValidity\r\n} from 'bluelib';\r\nimport { useContext, useState } from 'preact/hooks';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCheck, faExclamationCircle, faSpinner } from '@fortawesome/free-solid-svg-icons';\r\nimport Avatar from '../Static/Avatar';\r\nimport style from \"./ChangeAvatarBox.less\"\r\n\r\nexport default function (props) {\r\n\tlet defaultAvatar = props.currentAvatar ? props.currentAvatar : \"\";\r\n\r\n\tconst [avatarUrl, setAvatarUrl, avatarUrlStatus] = useUrl(defaultAvatar);\r\n\tconst [validity, setValidity] = useState({});\r\n\tconst instanceUrl = useContext(RoyalnetInstanceUrl);\r\n\tconst loginStatus = useContext(RoyalnetLoginStatus);\r\n\r\n\tfunction save() {\r\n\t\tsetValidity({\r\n\t\t\tvalidity: Validity.DISABLED,\r\n\t\t\ticon: <FontAwesomeIcon icon={faSpinner} pulse={true}/>\r\n\t\t});\r\n\t\troyalnetApiRequest(instanceUrl, \"PUT\", \"/api/user/avatar/v2\", {\r\n\t\t\tavatar_url: avatarUrl,\r\n\t\t\ttoken: loginStatus.token\r\n\t\t}).then((data) => {\r\n\t\t\tsetValidity({\r\n\t\t\t\tvalidity: Validity.OK,\r\n\t\t\t\ticon: <FontAwesomeIcon icon={faCheck}/>,\r\n\t\t\t\tmessage: `Avatar cambiato con successo! Per vedere il nuovo avatar ovunque, ricarica la pagina.`,\r\n\t\t\t});\r\n\t\t}).catch((err) => {\r\n\t\t\tsetValidity({\r\n\t\t\t\tvalidity: Validity.ERROR,\r\n\t\t\t\ticon: <FontAwesomeIcon icon={faExclamationCircle}/>,\r\n\t\t\t\tmessage: err.message\r\n\t\t\t});\r\n\t\t})\r\n\t}\r\n\r\n\tlet displayedAvatarUrl = null;\r\n\tif(avatarUrlStatus.validity === Validity.OK) {\r\n\t\tdisplayedAvatarUrl = avatarUrl;\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Panel title={\"Cambia avatar\"}>\r\n\t\t\t<p>\r\n\t\t\t\t<Avatar class={style.preview} src={displayedAvatarUrl}/>\r\n\t\t\t</p>\r\n\t\t\t<p>\r\n\t\t\t\t<FormInput type={\"text\"} name={\"avatar_url\"} label={\"URL\"} onChange={getEventValue(setAvatarUrl)} validity={avatarUrlStatus} value={avatarUrl}/>\r\n\t\t\t\t<FormButton label={\"Salva\"} onClick={save} disabled={avatarUrlStatus.validity !== Validity.OK} validity={validity}>Salva modifiche</FormButton>\r\n\t\t\t</p>\r\n\t\t\t<blockquote>\r\n\t\t\t\tNon sai dove hostare il tuo avatar? Prova <a href={\"https://imgur.com/upload?beta\"}>imgur</a>!\r\n\t\t\t</blockquote>\r\n\t\t</Panel>\r\n\t);\r\n}\r\n","import { useState } from 'preact/hooks';\nimport {useFormValidator} from 'bluelib';\nimport { Validity } from 'bluelib';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCheck, faEllipsisH, faExclamationTriangle, faKey, faQuestion } from '@fortawesome/free-solid-svg-icons';\n\nexport default function() {\n\tconst [password, setPassword] = useState(\"\");\n\tconst passwordStatus = useFormValidator(password, (value, setStatus) => {\n\t\tif(value.length === 0) {\n\t\t\tsetStatus({\n\t\t\t\tvalidity: Validity.NONE,\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\tif(value.length <= 12) {\n\t\t\tsetStatus({\n\t\t\t\tvalidity: Validity.WARNING,\n\t\t\t\ticon: <FontAwesomeIcon icon={faExclamationTriangle}/>,\n\t\t\t\tmessage: \"La password Ã¨ un po' corta... Cerca di farla lunga almeno 12 caratteri.\",\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\tsetStatus({\n\t\t\tvalidity: Validity.OK,\n\t\t\ticon: <FontAwesomeIcon icon={faCheck}/>\n\t\t});\n\t});\n\n\treturn [password, setPassword, passwordStatus]\n}\n","import { useContext } from 'preact/hooks';\nimport { Panel, RoyalnetLoginStatus, useRoyalnetData } from 'bluelib';\nimport LogoutBox from '../components/Dynamic/LogoutBox';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons';\nimport ErrorBox from '../components/Static/ErrorBox';\nimport Avatar from '../components/Static/Avatar';\nimport { HZero } from 'bluelib';\nimport RoyalMarkdown from '../components/Static/RoyalMarkdown';\nimport ChangePasswordBox from '../components/Dynamic/ChangePasswordBox';\nimport ChangeAvatarBox from '../components/Dynamic/ChangeAvatarBox';\n\nexport default function (props) {\n\tconst loginStatus = useContext(RoyalnetLoginStatus);\n\tconst [userData, userError] = useRoyalnetData(\"GET\", \"/api/user/ryg/v2\", {\n\t\tuid: props.uid\n\t});\n\n\tlet changeAvatarBox = null;\n\tlet changePasswdBox = null;\n\tlet logoutBox = null;\n\tif(loginStatus) {\n\t\t// noinspection EqualityComparisonWithCoercionJS\n\t\tif(loginStatus.user.uid == props.uid) {\n\t\t\tchangeAvatarBox = <ChangeAvatarBox currentAvatar={loginStatus.user.avatar_url}/>;\n\t\t\tchangePasswdBox = <ChangePasswordBox/>;\n\t\t\tlogoutBox = <LogoutBox logout={props.logout}/>;\n\t\t}\n\t}\n\n\tif(userError !== undefined) {\n\t\treturn (\n\t\t\t<ErrorBox error={userError}/>\n\t\t);\n\t}\n\n\tif(userData === undefined) {\n\t\treturn (\n\t\t\t<h0><Avatar src={\"https://combo.steffo.eu/open/ryg/GenericUser.png\"} alt={\"\"}/><FontAwesomeIcon icon={faSpinner} pulse={true}/></h0>\n\t\t)\n\t}\n\n\t/*\n\tlet bioBox = null;\n\tif(userData.bio) {\n\t\tbioBox = (\n\t\t\t<Panel title={\"Bio\"}>\n\t\t\t\t<RoyalMarkdown>\n\t\t\t\t\t{userData.bio.contents}\n\t\t\t\t</RoyalMarkdown>\n\t\t\t</Panel>\n\t\t)\n\t}\n    */\n\n\treturn (\n\t\t<div>\n\t\t\t<HZero>\n\t\t\t\t<Avatar data={userData}/> {userData.username}\n\t\t\t</HZero>\n\t\t\t{changeAvatarBox}\n\t\t\t{changePasswdBox}\n\t\t\t{logoutBox}\n\t\t</div>\n\t);\n}\n","import { FormButton, Panel } from 'bluelib';\nimport { route } from 'preact-router';\nimport { useState } from 'preact/hooks';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons';\nimport AnyLink from './Link';\n\nexport default function (props) {\n\tconst [logoutWorking, setLogoutWorking] = useState(false);\n\n\tfunction logout() {\n\t\tconsole.debug(\"Logging out...\");\n\t\tsetLogoutWorking(true);\n\t\tprops.logout();\n\t\troute(\"/\");\n\t}\n\n\tlet logoutValidity = {};\n\tif(logoutWorking) {\n\t\tlogoutValidity = {\n\t\t\ticon: <FontAwesomeIcon icon={faSpinner} pulse={true}/>\n\t\t}\n\t}\n\n\treturn (\n\t\t<Panel title={\"Logout\"}>\n\t\t\t<p>\n\t\t\t\tSenta, <AnyLink href={\"https://www.youtube.com/watch?v=KoC-M5yBKQ4\"}>dottoressa Frinzi</AnyLink>...\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\t<FormButton label={\"Logout\"} onClick={logout} disabled={logoutWorking} validity={logoutValidity}>Esci da questo posto di *****</FormButton>\n\t\t\t</p>\n\t\t</Panel>\n\t);\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preview\":\"preview__1zoOs\"};","import { useContext, useState } from 'preact/hooks';\nimport {useFormValidator} from 'bluelib';\nimport { royalnetApiRequest, RoyalnetInstanceUrl, Validity } from 'bluelib';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCheck, faExclamationCircle } from '@fortawesome/free-solid-svg-icons';\n\nexport default function(defaultValue) {\n\tconst [url, setUrl] = useState(defaultValue);\n\tconst urlStatus = useFormValidator(url, (value, setStatus) => {\n\t\tif(value.length === 0) {\n\t\t\tsetStatus({\n\t\t\t\tvalidity: Validity.NONE,\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\tif(!Boolean(/^https?:\\/\\/.*?[^/]$/.test(value))) {\n\t\t\tsetStatus({\n\t\t\t\tvalidity: Validity.ERROR,\n\t\t\t\ticon: <FontAwesomeIcon icon={faExclamationCircle}/>\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\tsetStatus({\n\t\t\tvalidity: Validity.OK,\n\t\t\ticon: <FontAwesomeIcon icon={faCheck}/>\n\t\t})\n\n\t});\n\n\treturn [url, setUrl, urlStatus];\n}\n","import {\r\n\tFormButton,\r\n\tFormInput,\r\n\tgetEventValue,\r\n\tPanel,\r\n\troyalnetApiRequest,\r\n\tRoyalnetInstanceUrl, RoyalnetLoginStatus,\r\n\tValidity\r\n} from 'bluelib';\r\nimport useFormPassword from '../../hooks/useFormPassword';\r\nimport { useContext, useState } from 'preact/hooks';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCheck, faExclamationCircle, faSpinner } from '@fortawesome/free-solid-svg-icons';\r\nimport useFormChangePassword from '../../hooks/useFormChangePassword';\r\n\r\nexport default function (props) {\r\n\tconst [password, setPassword, passwordStatus] = useFormChangePassword();\r\n\tconst [validity, setValidity] = useState({});\r\n\tconst instanceUrl = useContext(RoyalnetInstanceUrl);\r\n\tconst loginStatus = useContext(RoyalnetLoginStatus);\r\n\r\n\tfunction change() {\r\n\t\tsetValidity({\r\n\t\t\tvalidity: Validity.DISABLED,\r\n\t\t\ticon: <FontAwesomeIcon icon={faSpinner} pulse={true}/>\r\n\t\t});\r\n\t\troyalnetApiRequest(instanceUrl, \"PUT\", \"/api/user/passwd/v1\", {\r\n\t\t\tnew_password: password,\r\n\t\t\ttoken: loginStatus.token\r\n\t\t}).then((data) => {\r\n\t\t\tsetValidity({\r\n\t\t\t\tvalidity: Validity.OK,\r\n\t\t\t\ticon: <FontAwesomeIcon icon={faCheck}/>,\r\n\t\t\t\tmessage: `Password cambiata con successo! Sono state disconnesse ${data.revoked_tokens} altr${data.revoked_tokens !== 1 ? 'e' : 'a'} session${data.revoked_tokens !== 1 ? 'i' : 'e'}.`,\r\n\t\t\t});\r\n\t\t}).catch((err) => {\r\n\t\t\tsetValidity({\r\n\t\t\t\tvalidity: Validity.ERROR,\r\n\t\t\t\ticon: <FontAwesomeIcon icon={faExclamationCircle}/>,\r\n\t\t\t\tmessage: err.message\r\n\t\t\t});\r\n\t\t})\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Panel title={\"Cambia password\"}>\r\n\t\t\t<p>\r\n\t\t\t\tCambiare password Ã¨ come cambiare le chiavi di casa: tutti i browser che prima avevano le chiavi ora dovranno farne una nuova copia, e quindi dovrai rifare il login ovunque. Sei sicuro di voler procedere?\r\n\t\t\t</p>\r\n\t\t\t<p>\r\n\t\t\t\t<FormInput type={\"password\"} name={\"password\"} label={\"Nuova password\"} onChange={getEventValue(setPassword)} validity={passwordStatus} value={password}/>\r\n\t\t\t\t<FormButton label={\"Cambia\"} onClick={change} disabled={validity.disabled || password.length === 0} validity={validity}>Cambia password</FormButton>\r\n\t\t\t</p>\r\n\t\t</Panel>\r\n\t);\r\n}\r\n"],"sourceRoot":""}